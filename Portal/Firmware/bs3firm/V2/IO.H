//****************************************************************************
// @Module        Ports
// @Filename      IO.H
// @Project       Bs3
//----------------------------------------------------------------------------
// @Controller    Siemens C167CR-L
//
// @Compiler      Keil C166 V3.00
//
// @Codegenerator DAvE 1-0-0
//
// @Description   This file contains all function prototypes and macros for
//                the Parallel Ports.
//
//----------------------------------------------------------------------------
// @Date          18.09.98 10:01:40
//
//****************************************************************************

//****************************************************************************
// @Prototypes of global functions
//****************************************************************************

void IO_vInit(void);


// USER CODE BEGIN (IOHeader,1)

// USER CODE END


//****************************************************************************
// @Macros
//****************************************************************************

//****************************************************************************
// @Macro          IO_bReadPin(PinNr)
//
//----------------------------------------------------------------------------
// @Description   This macro returns the status of the chosen portpin.
//                Warning:
//                All instructions that manipulate single bits or bit
//                groups internally, use a read-modify-write sequence
//                that accesses the whole word, which contains the
//                specified bit(s).
//                The read modify-write approach may be critical with
//                hardware-effected bits. In this cases the hardware
//                may change specific bits while the read-modify-write
//                operation is in progress, where the writeback would
//                overwrite the new bit value generated by the hardware.
//                The solution is either the implemented hardware 
//                protection or realized through special programming
//                (see "Particular Pipeline Effects" and "Protected
//                Bits" in the User's Manual). 
//                
//                Note:
//                See the "Declaration of bit addressable SFRs" 
//                section in the header file for the available 
//                definitions for the parameter PinNr.
//
//----------------------------------------------------------------------------
// @Returnvalue   status of the chosen portpin
//
//----------------------------------------------------------------------------
// @Parameters    pin to be read
//
//----------------------------------------------------------------------------
// @Date          18.09.98 10:01:40
//
//****************************************************************************

#define IO_bReadPin(PinNr) PinNr


//****************************************************************************
// @Macro          IO_vSetPin(PinNr)
//
//----------------------------------------------------------------------------
// @Description   The chosen portpin is set to '1'.
//                Warning:
//                All instructions that manipulate single bits or bit
//                groups internally, use a read-modify-write sequence
//                that accesses the whole word, which contains the
//                specified bit(s).
//                The read modify-write approach may be critical with
//                hardware-effected bits. In this cases the hardware
//                may change specific bits while the read-modify-write
//                operation is in progress, where the writeback would
//                overwrite the new bit value generated by the hardware.
//                The solution is either the implemented hardware 
//                protection or realized through special programming
//                (see "Particular Pipeline Effects" and "Protected
//                Bits" in the User's Manual). 
//                
//                Note:
//                See the "Declaration of bit addressable SFRs" 
//                section in the header file for the available 
//                definitions for the parameter PinNr.
//
//----------------------------------------------------------------------------
// @Returnvalue   none
//
//----------------------------------------------------------------------------
// @Parameters    pin to be set to '1'
//
//----------------------------------------------------------------------------
// @Date          18.09.98 10:01:40
//
//****************************************************************************

#define IO_vSetPin(PinNr) PinNr = 1


//****************************************************************************
// @Macro          IO_vResetPin(PinNr)
//
//----------------------------------------------------------------------------
// @Description   The chosen portpin is set to '0'.
//                Warning:
//                All instructions that manipulate single bits or bit
//                groups internally, use a read-modify-write sequence
//                that accesses the whole word, which contains the
//                specified bit(s).
//                The read modify-write approach may be critical with
//                hardware-effected bits. In this cases the hardware
//                may change specific bits while the read-modify-write
//                operation is in progress, where the writeback would
//                overwrite the new bit value generated by the hardware.
//                The solution is either the implemented hardware 
//                protection or realized through special programming
//                (see "Particular Pipeline Effects" and "Protected
//                Bits" in the User's Manual). 
//                
//                Note:
//                See the "Declaration of bit addressable SFRs" 
//                section in the header file for the available 
//                definitions for the parameter PinNr.
//
//----------------------------------------------------------------------------
// @Returnvalue   none
//
//----------------------------------------------------------------------------
// @Parameters    pin to be set to '0'
//
//----------------------------------------------------------------------------
// @Date          18.09.98 10:01:40
//
//****************************************************************************

#define IO_vResetPin(PinNr) PinNr = 0


//****************************************************************************
// @Macro          IO_uwReadPort(PortNr)
//
//----------------------------------------------------------------------------
// @Description   This macro returns the value of the selected port. If a 
//                port has less than 16 pins, the unused bits are
//                set to 0 in the return value
//                
//                The following definitions for PortNr are available:
//                P0L,P0H,P1L,P1H,P2,P3,P4,P5,P6,P7,P8
//
//----------------------------------------------------------------------------
// @Returnvalue   value of the port
//
//----------------------------------------------------------------------------
// @Parameters    port to be read
//
//----------------------------------------------------------------------------
// @Date          18.09.98 10:01:40
//
//****************************************************************************

#define IO_uwReadPort(Port) Port


//****************************************************************************
// @Macro          IO_vWritePort(Port,Data)
//
//----------------------------------------------------------------------------
// @Description   The forwarded data is written to the selected port. If a port
//                has less than 16 pins, the bits not used are ignored in
//                the parameter value.
//                
//                The following definitions for PortNr are available:
//                P0L,P0H,P1L,P1H,P2,P3,P4,P6,P7,P8
//
//----------------------------------------------------------------------------
// @Returnvalue   none
//
//----------------------------------------------------------------------------
// @Parameters    port to be altered
// @Parameters    value to be written to the chosen port
//
//----------------------------------------------------------------------------
// @Date          18.09.98 10:01:40
//
//****************************************************************************

#define IO_vWritePort(Port,Data) Port = Data


//****************************************************************************
// @Macro          IO_vSetInput(Port,Mask)
//
//----------------------------------------------------------------------------
// @Description   This macro makes it possible to reconfigure the selected 
//                port. The parameter Mask determines which individual
//                port pins are to be used as inputs. Every bit position in
//                the parameter Mask corresponds to a port pin.
//                Note:
//                Instructions modifying the port direction should be
//                followed by an instruction that does not access the same
//                port.
//                
//                The following definitions for PortNr are available:
//                P0L,P0H,P1L,P1H,P2,P3,P4,P6,P7,P8
//
//----------------------------------------------------------------------------
// @Returnvalue   none
//
//----------------------------------------------------------------------------
// @Parameters    port to be configured
// @Parameters    mask for port pins to be configured
//
//----------------------------------------------------------------------------
// @Date          18.09.98 10:01:40
//
//****************************************************************************

#define IO_vSetInput(Port,Mask) D##Port &= ~Mask


//****************************************************************************
// @Macro          IO_vSetOutput(Port,Mask)
//
//----------------------------------------------------------------------------
// @Description   This macro makes it possible to reconfigure the selected 
//                port. The parameter Mask determines which individual
//                port pins are to be used as outputs. Every bit position in
//                the parameter Mask corresponds to a port pin.
//                Note:
//                Instructions modifying the port direction should be
//                followed by an instruction that does not access the same
//                port.
//                
//                The following definitions for PortNr are available:
//                P0L,P0H,P1L,P1H,P2,P3,P4,P6,P7,P8
//
//----------------------------------------------------------------------------
// @Returnvalue   none
//
//----------------------------------------------------------------------------
// @Parameters    port to be configured
// @Parameters    mask for port pins to be configured
//
//----------------------------------------------------------------------------
// @Date          18.09.98 10:01:40
//
//****************************************************************************

#define IO_vSetOutput(Port,Mask) D##Port |= Mask



// USER CODE BEGIN (IOHeader,2)

// USER CODE END


//****************************************************************************
// Declaration of SFRs
//****************************************************************************

sfr _PICON = 0xF1CA;


//****************************************************************************
// Declaration of bit addressable SFRs (for parameter PinNr)
//****************************************************************************

sbit  P0L_0 = P0L^0;
sbit  P0L_1 = P0L^1;
sbit  P0L_2 = P0L^2;
sbit  P0L_3 = P0L^3;
sbit  P0L_4 = P0L^4;
sbit  P0L_5 = P0L^5;
sbit  P0L_6 = P0L^6;
sbit  P0L_7 = P0L^7;
sbit  P0H_0 = P0H^0;
sbit  P0H_1 = P0H^1;
sbit  P0H_2 = P0H^2;
sbit  P0H_3 = P0H^3;
sbit  P0H_4 = P0H^4;
sbit  P0H_5 = P0H^5;
sbit  P0H_6 = P0H^6;
sbit  P0H_7 = P0H^7;
sbit  P1L_0 = P1L^0;
sbit  P1L_1 = P1L^1;
sbit  P1L_2 = P1L^2;
sbit  P1L_3 = P1L^3;
sbit  P1L_4 = P1L^4;
sbit  P1L_5 = P1L^5;
sbit  P1L_6 = P1L^6;
sbit  P1L_7 = P1L^7;
sbit  P1H_0 = P1H^0;
sbit  P1H_1 = P1H^1;
sbit  P1H_2 = P1H^2;
sbit  P1H_3 = P1H^3;
sbit  P1H_4 = P1H^4;
sbit  P1H_5 = P1H^5;
sbit  P1H_6 = P1H^6;
sbit  P1H_7 = P1H^7;
sbit  P2_0 = P2^0;
sbit  P2_1 = P2^1;
sbit  P2_2 = P2^2;
sbit  P2_3 = P2^3;
sbit  P2_4 = P2^4;
sbit  P2_5 = P2^5;
sbit  P2_6 = P2^6;
sbit  P2_7 = P2^7;
sbit  P2_8 = P2^8;
sbit  P2_9 = P2^9;
sbit  P2_10 = P2^10;
sbit  P2_11 = P2^11;
sbit  P2_12 = P2^12;
sbit  P2_13 = P2^13;
sbit  P2_14 = P2^14;
sbit  P2_15 = P2^15;
sbit  P3_0 = P3^0;
sbit  P3_1 = P3^1;
sbit  P3_2 = P3^2;
sbit  P3_3 = P3^3;
sbit  P3_4 = P3^4;
sbit  P3_5 = P3^5;
sbit  P3_6 = P3^6;
sbit  P3_7 = P3^7;
sbit  P3_8 = P3^8;
sbit  P3_9 = P3^9;
sbit  P3_10 = P3^10;
sbit  P3_11 = P3^11;
sbit  P3_12 = P3^12;
sbit  P3_13 = P3^13;
sbit  P3_15 = P3^15; 
sbit  P4_0 = P4^0;
sbit  P4_1 = P4^1;
sbit  P4_2 = P4^2;
sbit  P4_3 = P4^3;
sbit  P4_4 = P4^4;
sbit  P4_5 = P4^5;
sbit  P4_6 = P4^6;
sbit  P4_7 = P4^7;
sbit  P5_0 = P5^0;
sbit  P5_1 = P5^1;
sbit  P5_2 = P5^2;
sbit  P5_3 = P5^3;
sbit  P5_4 = P5^4;
sbit  P5_5 = P5^5;
sbit  P5_6 = P5^6;
sbit  P5_7 = P5^7;
sbit  P5_8 = P5^8;
sbit  P5_9 = P5^9;
sbit  P5_10 = P5^10;
sbit  P5_11 = P5^11;
sbit  P5_12 = P5^12;
sbit  P5_13 = P5^13;
sbit  P5_14 = P5^14;
sbit  P5_15 = P5^15;
sbit  P6_0 = P6^0;
sbit  P6_1 = P6^1;
sbit  P6_2 = P6^2;
sbit  P6_3 = P6^3;
sbit  P6_4 = P6^4;
sbit  P6_5 = P6^5;
sbit  P6_6 = P6^6;
sbit  P6_7 = P6^7;
sbit  P7_0 = P7^0;
sbit  P7_1 = P7^1;
sbit  P7_2 = P7^2;
sbit  P7_3 = P7^3;
sbit  P7_4 = P7^4;
sbit  P7_5 = P7^5;
sbit  P7_6 = P7^6;
sbit  P7_7 = P7^7;
sbit  P8_0 = P8^0;
sbit  P8_1 = P8^1;
sbit  P8_2 = P8^2;
sbit  P8_3 = P8^3;
sbit  P8_4 = P8^4;
sbit  P8_5 = P8^5;
sbit  P8_6 = P8^6;
sbit  P8_7 = P8^7;


// USER CODE BEGIN (IOHeader,3)

// USER CODE END

